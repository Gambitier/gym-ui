{
  "MainComponent": {
    "description": "Main component of stepped form",
    "prefix": ["wizard-main-component"],
    "body": [
      "",
      "import { Container, Step, StepLabel, Stepper } from \"@mui/material\";",
      "import { SubmitHandler } from \"react-hook-form\";",
      "import { use$1 } from \"../../api\";",
      "import { SteppedForm } from \"./SteppedForm\";",
      "import { FormValues } from \"./schema\";",
      "",
      "type Props = {",
      "  onSuccess: () => void;",
      "};",
      "",
      "// Component to be exported.",
      "// Keep the code in this component short - it should serve as top level for smaller components",
      "// export const Sample: React.FC<Props> = ({destructure props here}) => {...}",
      "export const $1: React.FC<Props> = ({ onSuccess }) => {",
      "  const api = use$1();",
      "  const isApiRequestPending = api.isPending;",
      "",
      "  const onSubmit: SubmitHandler<FormValues> = async (data: FormValues) => {",
      "    await api.mutateAsync({",
      "      // TODO: assign appropriate data here",
      "      data: data,",
      "    });",
      "    onSuccess();",
      "  };",
      "",
      "  // TODO: define step titles here",
      "  const stepTitles = [\"Step One\", \"Step Two\"];",
      "",
      "  const { Form, SubmitButton, activeStep } = SteppedForm(",
      "    onSubmit,",
      "    isApiRequestPending,",
      "    stepTitles.length",
      "  );",
      "",
      "  return (",
      "    <Container>",
      "      <Stepper activeStep={activeStep - 1} alternativeLabel>",
      "        {stepTitles.map((label) => (",
      "          <Step key={label}>",
      "            <StepLabel>{label}</StepLabel>",
      "          </Step>",
      "        ))}",
      "      </Stepper>",
      "      <Form />",
      "      <SubmitButton />",
      "    </Container>",
      "  );",
      "};",
      "",
      "",
    ],
  },

  "WizzardStepComponentTemplate": {
    "description": "Wizard Step Component Template",
    "prefix": ["wizard-step-component-template"],
    "body": [
      "",
      "import { Stack } from \"@mui/material\";",
      "import { forwardRef } from \"react\";",
      "import { useFormContext } from \"react-hook-form\";",
      "import { WizardStepProps } from \"@/components/Elements\";",
      "import { FormValues } from \"./schema\";",
      "",
      "export const $STEP_NAMEWizardStep = forwardRef(",
      "  ({ onSuccessValidation, onBack }: WizardStepProps, _ref) => {",
      "    const {",
      "      control: _hookFormControl,",
      "      formState,",
      "      trigger,",
      "      register,",
      "      getValues,",
      "    } = useFormContext<FormValues>();",
      "    const { errors } = formState;",
      "",
      "    const onNext = async () => {",
      "      // Triggers only the validation schema for this wizard-step/section",
      "      const isValid = await trigger(\"$FORM_SECTION_PROP_NAME\");",
      "      if (isValid) {",
      "        onSuccessValidation();",
      "      }",
      "    };",
      "",
      "    return (",
      "      <Stack spacing={1}>",
      "        {/* TODO: Define the form of this wizard-step/section */}",
      "",
      "        {/* TODO: keep either of \"Next\" or \"Back\" button */}",
      "        <Button onClick={onNext}>Next</Button>",
      "        <Button onClick={onBack}>Back</Button>",
      "      </Stack>",
      "    );",
      "  }",
      ");",
      "",
      "",
    ],
  },

  "ParentForm": {
    "description": "Stepped/Parent Form",
    "prefix": ["wizard-parent-form"],
    "body": [
      "",
      "import { Button } from \"@/components/Elements\";",
      "import { yupResolver } from \"@hookform/resolvers/yup\";",
      "import { useEffect, useState } from \"react\";",
      "import { FormProvider, SubmitHandler, useForm } from \"react-hook-form\";",
      "import { v4 } from \"uuid\";",
      "import { WizardStepOne } from \"./WizardStepOne\";",
      "import { FormValues, schema } from \"./schema\";",
      "",
      "const useFormWithValidation = () => {",
      "  const form = useForm<FormValues>({",
      "    resolver: yupResolver(schema),",
      "    mode: \"onBlur\",",
      "  });",
      "",
      "  return form;",
      "};",
      "",
      "export const SteppedForm = (",
      "  onSubmit: SubmitHandler<FormValues>,",
      "  isApiRequestPending: boolean,",
      "  totalSteps: number",
      ") => {",
      "  const methods = useFormWithValidation();",
      "",
      "  const {",
      "    register,",
      "    handleSubmit,",
      "    formState,",
      "    reset,",
      "    control: _hookFormControl,",
      "  } = methods;",
      "",
      "  const { isDirty, isValid, isSubmitSuccessful } = formState;",
      "  const formId = v4();",
      "",
      "  useEffect(() => {",
      "    if (isSubmitSuccessful) {",
      "      reset();",
      "    }",
      "  }, [isSubmitSuccessful, reset]);",
      "",
      "  const SubmitButton = () => (",
      "    <Button",
      "      type=\"submit\"",
      "      variant=\"contained\"",
      "      disabled={!isDirty || !isValid || isApiRequestPending}",
      "      form={formId}",
      "      isLoading={isApiRequestPending}",
      "    >",
      "      Submit",
      "    </Button>",
      "  );",
      "",
      "  const [activeStep, setActiveStep] = useState(1);",
      "",
      "  const onBack = () => {",
      "    if (activeStep !== 1) {",
      "      setActiveStep(activeStep - 1);",
      "    }",
      "  };",
      "",
      "  const onSuccessValidation = () => {",
      "    setActiveStep(activeStep + 1);",
      "  };",
      "",
      "  const Form = () => (",
      "    <FormProvider {...methods}>",
      "      <form id={formId} onSubmit={handleSubmit(onSubmit)}>",
      "        {/* TODO: ADD STEPS HERE.......................... */}",
      "        {activeStep === 1 && (",
      "          <WizardStepOne",
      "            {...register(\"stepOne\")}",
      "            onSuccessValidation={onSuccessValidation}",
      "            onBack={onBack}",
      "            totalSteps={totalSteps}",
      "          />",
      "        )}",
      "      </form>",
      "    </FormProvider>",
      "  );",
      "",
      "  return { SubmitButton, Form, activeStep };",
      "};",
      "",
    ],
  },

  "SchemaTemplate": {
    "description": "Wizard Schema Template",
    "prefix": ["wizard-schema-template"],
    "body": [
      "",
      "import * as yup from \"yup\";",
      "",
      "type StepOneFormValues = {",
      "  //",
      "};",
      "",
      "type StepTwoFormValues = {",
      "  //",
      "};",
      "",
      "const stepOneSchema: yup.ObjectSchema<StepOneFormValues> = yup.object().shape({",
      "  //",
      "});",
      "",
      "const stepTwoSchema: yup.ObjectSchema<StepTwoFormValues> = yup.object().shape({",
      "  //",
      "});",
      "",
      "// TODO: use valid name for key & type of FormValues",
      "export type FormValues = {",
      "  stepOne: StepOneFormValues;",
      "  stepTwo: StepTwoFormValues;",
      "};",
      "",
      "export const schema: yup.ObjectSchema<FormValues> = yup.object().shape({",
      "  stepOne: stepOneSchema,",
      "  stepTwo: stepTwoSchema,",
      "});",
      "",
      "",
    ],
  },
}
