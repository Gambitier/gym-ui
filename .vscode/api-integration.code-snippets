{
  "API Mutation Template": {
    "prefix": ["api-mutation"],
    "body": [
      "",
      "import { axiosInstance } from \"@/lib/axios\";",
      "import { useNotificationStore } from \"@/stores/notifications\";",
      "import { useMutation } from \"@tanstack/react-query\";",
      "import { $1ResponseDTO } from \"./types\";",
      "",
      "type $1RequestDTO = {",
      "  // TODO: define type",
      "  // NOTE: if FormValues type is same as this then dont add anything here",
      "};",
      "",
      "type ApiParams = {",
      "  data: $1RequestDTO;",
      "};",
      "",
      "const callApi = async (params: ApiParams): Promise<$1ResponseDTO> => {",
      "  const apiEndpoint = `/v1/$2`; // TODO: set valid api endpoint",
      "  return axiosInstance.post(apiEndpoint, params.data);",
      "};",
      "",
      "export const use$1 = () => {",
      "  const { addNotification } = useNotificationStore();",
      "",
      "  return useMutation({",
      "    mutationFn: (params: ApiParams) => {",
      "      return callApi(params);",
      "    },",
      "    onMutate: async (_apiParams: ApiParams) => {",
      "      // TODO: use correct queryKeys here, use keys from _apiParams if required",
      "      // cancel ongoing queries, need awaiting before calling actual api",
      "      await queryClient.cancelQueries({ queryKey: [queryKey] });",
      "    },",
      "    onSuccess: (_responseData: $1ResponseDTO, _apiParams: ApiParams) => {",
      "      // TODO: use correct queryKeys here, use values from _apiParams/_responseData if required",
      "      queryClient.invalidateQueries({ queryKey: [queryKey] });",
      "",
      "      addNotification({",
      "        type: \"success\",",
      "        title: \"Request Successful\",",
      "        message: _responseData.message,",
      "      });",
      "    },",
      "  });",
      "};",
      "",
      "",
    ],
    "description": "API Mutation Template",
  },
  "API Query Template": {
    "prefix": ["api-query"],
    "body": [
      "",
      "import { axiosInstance } from \"@/lib/axios\";",
      "import { useQuery } from \"@tanstack/react-query\";",
      "import { $1ResponseDTO } from \"./types\";",
      "",
      "type ApiParams = {",
      "  // TODO: define params required to call the api",
      "  // id: string;",
      "  // pagination: PaginationQuery;",
      "};",
      "",
      "const callApi = async (params: ApiParams): Promise<$1ResponseDTO> => {",
      "  const apiEndpoint = `/v1/$2`; // TODO: set valid api endpoint\"",
      "  return axiosInstance.get(apiEndpoint);",
      "};",
      "",
      "export const queryKey$1 = \"$1-QueryKey\";",
      "export const use$1 = (params: ApiParams) => {",
      "  return useQuery({",
      "    queryKey: [",
      "      queryKey$1,",
      "      // TODO: if query data dependes on any other keys, mention them;",
      "      // else remove the following code",
      "      // params.id,",
      "    ],",
      "    queryFn: () => callApi(params),",
      "",
      "    // Uncomment following when you need to keep current data displayed on page",
      "    // until next data is available from api",
      "    // placeholderData: keepPreviousData,",
      "  });",
      "};",
      "",
    ],
    "description": "API Query Template",
  },
}
