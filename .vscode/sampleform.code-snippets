{
  "Form Component Template": {
    "prefix": ["form-component-template"],
    "body": [
      "import { yupResolver } from \"@hookform/resolvers/yup\";",
      "import { useEffect } from \"react\";",
      "import { SubmitHandler, useForm } from \"react-hook-form\";",
      "import * as yup from \"yup\";",
      "",
      "// step 1: add type for form",
      "export type FormValues = {",
      "  email: string;",
      "  password: string;",
      "};",
      "",
      "// stpe 2: write schema (validations) for FormType",
      "const schema: yup.ObjectSchema<FormValues> = yup.object().shape({",
      "  email: yup.string().email().required(),",
      "  password: yup",
      "    .string()",
      "    .required()",
      "    .min(6, \"Password should have at least 6 characters\"),",
      "});",
      "",
      "// step 3: create fn useFormWithValidation",
      "const useFormWithValidation = () => {",
      "  const form = useForm<FormValues>({",
      "    defaultValues: {",
      "      email: \"\",",
      "      password: \"\",",
      "    },",
      "    resolver: yupResolver(schema),",
      "    mode: \"onBlur\",",
      "  });",
      "",
      "  return form;",
      "};",
      "",
      "// step 4: define the form component",
      "const $1Form = (onSubmit: SubmitHandler<FormValues>, isApiRequestPending: boolean) => {",
      "  // use `form-function-template` snippet here",
      "  $2",
      "};",
      "",
      "// step 5: add component prop type.",
      "// These Props are passed from routes or other calling components",
      "type Props = {",
      "  onSuccess: () => void;",
      "};",
      "",
      "// step 6: Component to be exported.",
      "// Keep the code in this component short - it should serve as top level for smaller components",
      "// export const Sample: React.FC<Props> = ({destructure props here}) => {...}",
      "export const $1: React.FC<Props> = ({onSuccess}) => {",
      "    const api = use$1();",
      "    const isApiRequestPending = api.isPending;",
      "",
      "    const onSubmit: SubmitHandler<FormValues> = async (data: FormValues) => {",
      "        // HANLDE FORM SUBMISSION HERE....................",
      "        throw new Error(`onSubmit Not implemented, data: ${JSON.stringify(data)}`);",
      "        onSuccess();",
      "    };",
      "",
      "    const { Form } = $1Form(onSubmit, isApiRequestPending);",
      "",
      "    return (",
      "        <>",
      "            <Form/>",
      "        </>",
      "    );",
      "};",
    ],
    "description": "Inserts a sample form component with validation",
  },
  "Form Function Template": {
    "prefix": ["form-function-template"],
    "body": [
      "",
      "    const { register, handleSubmit, formState, reset, control: _hookFormControl } = useFormWithValidation();",
      "    const { errors, isDirty, isValid, isSubmitSuccessful } = formState;",
      "    const { Button } = \"@/components/Elements\";",
      "    const formId = v4();",
      "",
      "    useEffect(() => {",
      "        if (isSubmitSuccessful) {",
      "            reset();",
      "        }",
      "    }, [isSubmitSuccessful, reset]);",
      "",
      "    const SubmitButton = () => (",
      "        <Button",
      "            type=\"submit\"",
      "            variant=\"contained\"",
      "            disabled={!isDirty || !isValid || isApiRequestPending}",
      "            form={formId}",
      "            isLoading={isApiRequestPending}",
      "        >",
      "        Submit",
      "        </Button>",
      "    );",
      "",
      "    const Form = () => (",
      "        <form id={formId} onSubmit={handleSubmit(onSubmit)}>",
      "            <Stack spacing={1}>",
      "                {/* TODO: ADD FORM ELEMENTS HERE.......................... */}",
      "                ",
      "                <SubmitButton/>",
      "            </Stack>",
      "        </form>",
      "    );",
      "",
      "    return { SubmitButton, Form };",
      "",
    ],
    "description": "Inserts a sample form component with validation",
  },
}
